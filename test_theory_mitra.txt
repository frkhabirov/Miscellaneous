Опишите общий процесс тестирования отдельного модуля SPA приложения.

Ну, общий-то ничем не отличается от тестирования всякого любого приложения - сбор требований, подготовка проверок, выполнение проверок, отработка багов.
По части SPA - проверка динамического отображения контента от других пользователей; проверка динамического же отображения контента, создаваемого пользователем, без перезагрузки страницы; проверка сохранения созданного контента после перезагрузки страницы или перелогина.

Что должен включать репорт найденной ошибки, какую структуру должен иметь?

По структуре в целом ничего не должен, это внутренний вопрос команды. Обязательные (ну, или очень важные) компоненты - ID, название (краткое описание) ошибки, выполняемые шаги, ожидаемый результат, фактический результат. Весьма важные компоненты - тестовое окружение, предусловия, пруфы, срочность, серьёзность. Опциональные - история бага, автор репорта, подробное описание ошибки

Как будет выглядеть баг-репорт, если, к примеру, не работает электрический чайник?

АйДи: АйДи
Название: Чайник не нагревает воду до кипения
Предусловие: Убедиться в работоспособности электрической розетки, убедиться в механической целостности прибора (корпус, кнопки/клавиши, шнур)
Шаги:
 - Налить воду в чайник (не меньше указанного в инструкции объёма);
 - Подсоединить прибор к электрической сети (воткнуть вилку шнура в электрическую розетку);
 - Нажать клавишу включения чайника (при наличии);
 - Подождать установленное инструкцией (или личным опытом) время
ОР: вода в чайнике нагрелась и закипела
ФР: вода в чайнике не нагревается
Постусловие: Отсоединить прибор от электрической сети, вылить (выпить) воду из чайника

Составить баг репорт страниц и разделов, включая корневой по иерархии сайта https://site.domain.ru

Не понял вопроса, простите

Необходимо протестировать регистрацию нового пользователя в приложении. Расскажите, как вы будете это делать? (описать все этапы)

1. Проверить наличие опции регистрации нового пользователя в приложении (как из неавторизованного состояния, так и из авторизованного старым пользователем)
2. Проверить визуал формы регистрации  - плейсхолдеры, вид курсора при перемещении по элементам формы, явно указанные требования к заполняемым полям, визуальные эффекты при вводе данных, не удовлетворяющих требованиям, скрытие символов пароля спецсимволами (напр., звёздочками), состояние кнопки отправки формы (может быть неактивна до корректного ввода всех необходимых данных)
3. Проверить функционал формы регистрации - отправка формы с полностью валидными данными, получение подтверждения об успешной регистрации / залогин в приложении; пустые поля, заполнение отдельных полей валидными и невалидными данными, рус/lat/козебяки, цифры, спецсимволы, контроль содержания специфических полей (напр., имейл, телефон или дата), ограничения по длине полей; уведомление о неуспешной регистрации (если удалось отправить невалидную форму), указание на ошибку, переоткрытие формы с предзаполненными валидными полями
4. Проверка фактической регистрации после успешной отправки формы - перелогин в приложении, при открытом доступе - запрос данных пользователя через API или через СУБД

Представьте ситуацию, что у разрабатываемого приложения еще нет интерфейса, но реализован REST API. Разработчик просит вас создать какую-то сущность в базе и проверить, что она создалась с нужными параметрами. Опишите ход ваших действий в данной ситуации: что и как вы бы проверили, опираясь на имеющееся описание API, с указанием конкретики (название типов запросов и т.д.)

1. GET запросом проверить, что сущности с заданными параметрами в базе ещё нет
2. POST запросом поместить сущность с заданными параметрами в базу
3. GET запросом проверить, что сущность с заданными параметрами в базе появилась
(можно ещё поиграться с запросами PUT и PATCH, но брат Оккам этого бы не одобрил)

Поле username должно быть обязательным, но оно не обязательно. Приведите пример баг-репорта, созданного для этой ошибки.

Название: Поле username формы ввода данных принимает пустое значение
Шаги:
 - открыть форму ввода данных
 - [заполнить валидными данными все поля, кроме username]
 - нажать кнопку отправки формы данных
ОР: отображается сообщение о неуспешной отправке; форма ввода данных открыта
ФР: форма ввода данных закрывается. отображается попап с сообщением об успешной загрузке данных

Можно ли передавать в json бинарные данные? Почему?

Почему, не знаю, но json - это текстовый формат записи данных. стандарт такой.
Технически, это преодолевается, но ценой специальных усилий, в принципе, того не стОящих

Написать тестовые наборы данных для поля ввода даты, которое отсеивает пользователей в возрасте до 18 лет.

["-", пусто, 12, 17, 18, 19, 35, 150] - это возраст. нужно пересчитать в даты, отталкиваясь от текущей даты ("-" - любая будущая дата)
"-", пусто, 150 - невалидные (про 150 - это исключительно волюнтаристское, можно и без него обойтись, или другое число использовать, дело вкуса)
12, 17 - валидные, но отсеиваются
18, 19, 35 - норм

Как протестировать скачивание файла при недостаточном количестве места на диске.
Как протестировать загрузку файла при недостаточном количестве места на сервере.

На текущем этапе своего морального и интеллектуального развития я склоняюсь к варианту "никак". Проще предписать пользователю следить за местом на его диске... не говоря уж про место на сервере...

Есть веб-страница с полями: e-mail, password и кнопкой submit. Необходимо привести примеры отрицательных тест-кейсов, по которым можно проверить эту страницу.

Для начала, пустые поля - то имейла нет, то пассворда
Тоже для начала, но потом - заведомо кривые шаблоны ввода имейл. По-хорошему, должно отсеиваться ещё до реальной отправки данных на сервер (собаки нет, две собаки, домена первого уровня нет, две точки подряд)
Боевые проверки - имейл валидный, но в базе его нет; имейл валидный, и в базе есть - только пассворд с ним не бьётся (да, проверки пассворда отдельно здесь не нужны, от слова "совсем") + проверки на текстовое содержание ругалок страницы на некорректный ввод данных

Имеется функционал калькулятора, доступный через веб браузер по ссылке. Он имеет только функцию делить, так сказать, MVP-версию. Диапазоны для вписывания в числитель и делитель от 0,1 до 99,9. Вывод значения происходит автоматически, потому что front-end реализован на React JS. Как вы будете тестировать этот функционал? Какие виды тестирования примените? Какие техники тест-дизайна используете?

Подождите-подождите... что значит "Вывод значения происходит автоматически"? - я не успел ничего ввести, а блистательный фронт-энд уже показывает мне результат? и с каждым новым введённым символом показывает новый результат? или какой-никакой ентер я всё-таки нажать должен (ну, или покинуть поля ввода табом или мышкой/тапом)? Ладно, с видами тестирования вы сами же и ответили в вопросе - речь о кроссбраузерном/кроссплатформенном тестировании, надо полагать... А что до техник тест-дизайна - с поправкой на кривую формулировку вопроса - я бы склонился к варианту "таблица принятия решений" (+классы эквивалентности/граничные значения, куда без них) - нужно скомбинировать тестовый набор [пустота, ноль, не число, отрицательное число, 0.1, 0.11, 0.2, 50, 50.0, 99.8, 99.89, 99.9, 99.91, 100, 100.0, 150.0, что-нибудь ещё по вкусу] по параметру "числитель" с таким же тестовым набором по параметру "делитель", определить ожидаемыый результат по каждой комбинации - и... и всё, произвести тестирование